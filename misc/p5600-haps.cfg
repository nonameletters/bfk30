set _CHIPNAME p5600
set _CPUID0 0x30400863
set _CPUID1 0x30401863

adapter_khz 1000
transport select jtag
reset_config trst_and_srst srst_gates_jtag ;#srst_pulls_trst ;#connect_assert_srst

jtag newtap $_CHIPNAME cm   -expected-id 0x30402863 -irlen 5
jtag newtap $_CHIPNAME cpu1 -expected-id $_CPUID1 -irlen 5
jtag newtap $_CHIPNAME cpu0 -expected-id $_CPUID0 -irlen 5

set _TARGETNAME_1 $_CHIPNAME.cpu0
set _TARGETNAME_2 $_CHIPNAME.cpu1

# special openocd build
set _cputype [lsearch -inline [target types] "mips_iAptiv"]
if { $_cputype == "" } { set _cputype "mips_m4k" }

target create $_TARGETNAME_1 $_cputype -endian little -chain-position $_TARGETNAME_1
target create $_TARGETNAME_2 $_cputype -endian little -chain-position $_TARGETNAME_2

$_TARGETNAME_1 configure -work-area-phys 0xA0000800 -work-area-size 0x400 -work-area-backup 0
$_TARGETNAME_2 configure -work-area-phys 0xA0000C00 -work-area-size 0x400 -work-area-backup 0

foreach t [target names] {
  targets $t
  $t mips32 scan_delay 20000
}
targets $_TARGETNAME_1

#define 2 targets working in smp
target smp $_TARGETNAME_1 $_TARGETNAME_2

set KSEG1			0xa0000000
set RESET_VECTOR	0xBFC00000
set SRAM			0xBBF80000	;# 64k

set USB_BASE		0xBF100000
set PMU_BASE		0xBF04D000

# OpenOCD reads and writes these locations on startup...
set DSEG			0xFF200000
set EJTAG_DCR		0xFF300000
set EJTAG_V25_IBS	0xFF301000
set EJTAG_V25_DBS	0xFF302000

set DBGEX_VECTOR	0xBFC00480

array set ejtagc {
 IDCODE		0x01
 IMPCODE	0x03
 ADDRESS	0x08
 DATA		0x09
 CONTROL	0x0A
 ALL		0x0B
 EJTAGBOOT	0x0C
 NORMALBOOT 0x0D
 FASTDATA	0x0E
 TCBCONTROLA 0x10
 TCBCONTROLB 0x11
 TCBDATA	 0x12
 TCBCONTROLC 0x13
 PCSAMPLE	 0x14
 TCBCONTROLD 0x15
 TCBCONTROLE 0x16
 FDC		0x17

 CR_Rocc	0x80000000 CR_Rocc_width 1 CR_Rocc_pos 31
 CR_Psz_width 2 CR_Psz_pos 29
 CR_VPED	0x00800000
 CR_Doze	0x00400000
 CR_Halt	0x00200000
 CR_PerRst	0x00100000
 CR_PRnW	0x00080000
 CR_PrAcc	0x00040000
 CR_PrRst	0x00010000
 CR_ProbEn   0x00008000
 CR_ProbTrap 0x00004000
 CR_EjtagBrk 0x00001000
 CR_DM       0x00000008
 
 IC_EJTAGver_wigth 3 IC_EJTAGver_pos 29
 IC_R3k		0x10000000
 IC_DINTsup	0x01000000
 IC_ASIDsize_width 2 IC_ASIDsize_pos 21
 IC_MIPS16e 0x00010000
 IC_NoDMA	0x00004000
 IC_Type_width 3 IC_Type_pos 11
 IC_Typeinfo_width 10 IC_Typeinfo_pos 1
 IC_MIPS64	0x00000001
}

array set cm2c {
 TCBCONFIG	0x00
 IDCODE		0x01
 IMPCODE	0x03
 TCBTW		0x04
 TCBRDP		0x05
 TCBWRP		0x06
 TCBSTP		0x07
 CONTROL	0x0A
 TCBCONTROLB 0x11
 TCBDATA	 0x12
 TCBCONTROLD 0x15
 TCBCONTROLE 0x16
 TCBSYS		0x1E
}

#> p5600.cpu1 mips32 ejtag_reg
#       idcode: 0x30400863
#      impcode: 0xc1404800
#ejtag control: 0x4004c008
#          DCR: 0x000703db
#DAS supported
#FDC supported
#DataBrk supported
#InstBrk supported
#Inverted Data value supported
#Data value stored supported
#Complex Breakpoints supported
#PC Sampling supported

# halt
# source [find tools/memtest.tcl]
# memTestDataBus $KSEG1
# memTestAddressBus $KSEG1 0x20000000

# irscan $_TARGETNAME_1 0x0A
# drscan $_TARGETNAME_1 32 0

# irscan $_TARGETNAME_2 0x0A
# drscan $_TARGETNAME_2 32 0

proc ejtag_show_dcr {} {
  mem2array ma 32 $::EJTAG_DCR 1
  set rv $ma(0)
  foreach {rn rb rw ra} {
  EJTAG_Brk_Override 31 1 rw
  ENM 29 1 ro
  PCnoGID 28 1 rw
  PCnoTCID 27 1 rw
  PCIM 26 1 rw
  PCnoASID 25 1 rw
  DASQ 24 1 rw
  DASe 23 1 rw
  DAS 22 1 ro
  FDCImpl 18 1 ro
  DataBrk 17 1 ro
  InstBrk 16 1 ro
  IVM 15 1 ro
  DVM 14 1 ro
  RDVec 11 1 rw
  CBT 10 1 ro
  PCS 9 1 ro
  PCR 6 3 rw
  PCSe 5 1 rw
  IntE 4 1 rw
  NMIE 3 1 rw
  NMIpend 2 1 ro
  SRstE 1 1 rw
  ProbEn 0 1 ro
  } {
    echo [format "%-12s %x %s" $rn [expr ($rv >> $rb) & ((1<<$rw)-1)] $ra]
  }
}

set CPU_MAX_ADDRESS 0xFFFFFFFC
source [find bitsbytes.tcl]
source [find memory.tcl]

proc usb_enable {} {
  set a [expr $::PMU_BASE + 0x050]
  memwrite32 $a [expr [memread32 $a] | 1]
  return
}

proc usb_ulpi_x {ra xa {data {}}} {
  set a [expr $::USB_BASE + 0xC280]
  while (1) {
    set res [memread32 $a]
    if { ![expr $res & (1<<23)] } break;
  }
  if { $data != {} } {
    memwrite32 $a [expr (($ra & 0x3F) << 16) | (($xa & 0xFF) << 8) | ($data & 0xFF) | (1<<22) | (1 << 25)]
  } else {
    memwrite32 $a [expr (($ra & 0x3F) << 16) | (($xa & 0xFF) << 8) | (1 << 25)]
  }
  while (1) {
    set res [memread32 $a]
    if { ![expr $res & (1<<23)] } break;
  }
  if { !($res & (1<<24)) } { error "Read error" }
  return "0x[format %4X [expr $res]]"
}

proc cm2_control {} {
  # 31 RW0 - Pres: 1 Reset Occured
  # 21 RW  - Halt: 1 Internal CM clock is stopped
  irscan cm $::cm2c(CONTROL)
  set c [drscan cm 32 0]
  runtest 5
  return "0x[format {%4x} $c]"
}

# vim: ft=tcl:ts=4:et:
